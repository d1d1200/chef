## Autogenerated using chef nginx::backend any modification here will be overidden

<% if node[:nginx][:backend_nossl][:upstream_type]=='tcp' -%>
upstream <%= node[:nginx][:backend_nossl][:beno_bename] %> {
    server <%= node[:nginx][:backend_nossl][:beno_backend] rescue 'localhost' %>:<%= node[:nginx][:backend_nossl][:beno_backend_port] rescue '3000' %> weight=1 fail_timeout=0;
    
    <% if @be_backend1 %>
    server <%= node[:nginx][:backend_nossl][:beno_backend1] rescue 'localhost' %>:<%= node[:nginx][:backend_nossl][:beno_backend1_port] rescue '8000' %> weight=1 fail_timeout=0;
    <% end -%>
}
<% else -%>
upstream unicorn_<%= @application[:domains].first %> {
 server unix:<%= @application[:deploy_to]%>/shared/sockets/unicorn.sock fail_timeout=0;
}
<% end -%>

server {
  listen   <%= node[:nginx][:backend_nossl][:beno_port] %>;
  server_name   <%= node[:nginx][:backend_nossl][:beno_servername] rescue 'plsgivename' %>;
  error_log   <%= node[:nginx][:backend_nossl][:beno_log_dir] %>/<%= node[:nginx][:backend_nossl][:beno_bename] %>-errors.log;
  access_log  <%= node[:nginx][:backend_nossl][:beno_log_dir] %>/<%= node[:nginx][:backend_nossl][:beno_bename] %>-access.log;

  location <%= node[:nginx][:backend_nossl][:beno_location] %> {

    # Pass requests to backend <%= node[:nginx][:backend_nossl][:beno_bename] %>
    ##<!-- proxy_pass http://<%= node[:nginx][:backend_nossl][:be_backend] rescue 'localhost' %>:<%= node[:nginx][:backend_nossl][:be_backend_port] rescue '3000' %>; -->
    proxy_pass http://<%= node[:nginx][:backend_nossl][:beno_bename] rescue 'localhost' %>;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_redirect off;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header  X-Real-IP  $remote_addr;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header  Host $http_host;
##  try_files $uri $uri/index.html $uri.html @<%= node[:nginx][:backend_nossl][:beno_bename] %>;

    # For CORS Ajax
    proxy_pass_header Access-Control-Allow-Origin;
    proxy_pass_header Access-Control-Allow-Methods;
    proxy_hide_header Access-Control-Allow-Headers;
    add_header Access-Control-Allow-Headers 'X-Requested-With, Content-Type';
    add_header Access-Control-Allow-Credentials true;

    # custom proxy cache
    <% if node[:nginx][:backend_nossl][:proxy_cache_path] -%>
    proxy_cache_path <%= node[:nginx][:backend_nossl][:proxy_cache_path] rescue '/var/lib/nginx/cache levels=1:2 keys_zone=backcache:10m max_size=256m' %>;
    <% end -%>
    <% if node[:nginx][:backend_nossl][:proxy_cache_key] -%>
    proxy_cache_key "<%= node[:nginx][:backend_nossl][:proxy_cache_key] rescue '$request_method$request_uri$is_args$args$http_locale' %>";
    <% end -%>
    <% if node[:nginx][:backend_nossl][:proxy_cache_valid] -%>
    proxy_cache_valid <%= node[:nginx][:backend_nossl][:proxy_cache_valid] rescue '200 302 10m' %>;
    <% end -%>
    <% if node[:nginx][:backend_nossl][:proxy_cache] -%>
    proxy_cache <%= node[:nginx][:backend_nossl][:proxy_cache] rescue 'backcache' %>;
    <% end -%>
    <% if node[:nginx][:backend_nossl][:proxy_cache_bypass] -%>
    proxy_cache_bypass <%= node[:nginx][:backend_nossl][:proxy_cache_bypass] rescue '$http_cache_control' %>;
    <% end -%>
    <% if node[:nginx][:backend_nossl][:xcache] -%>
    add_header X-Cache <%= node[:nginx][:backend_nossl][:xcache] rescue '$upstream_cache_status' %>;
    <% end -%>

  }
}
